{
	"claritatea.netlify.app/": {
		"description": "Magazine website presenting the newest issues, live updates, physical copy order and newsletter. Implemented using vanilla JS. It contains a password-protected admin pannel that allows the magazine creators to update the website without scripting knowledge. Github: https://github.com/GandalfTea/claritatea.ro",
		"tabs": {
			"0": {
				"name": "Landing",
				"desktop": "./assets/claritatea_desktop.png",
				"mobile": "./assets/claritatea_mobile.png",
				"numcom" : "3",
				"comments": {

					"0": {
						"text": "Student Art Carousel with buttons and author. In the future, articles and painting will be submited through this website and filtered in the admin page on a custom server.",
						"depth": "250"
					},

					"1": {
						"text": "Custom cursor carousel of older magazines.",
						"depth" : "1500"
					},
							
					"2": {
						"text": "RESTful API news section updated from separate password-protected admin panel.",
						"depth": "1800"
					}
				}
			}
		}
	},


	"stejar.casa": {
		"description": "House presentation website done for private client. It extensive use of videos, a 3D Terrain and House placement model made with Three.js and a Google Maps API embeded easy localisation. It also contains a detailed construction album page that separates each step of construction with a brief description and a set of site pictures.",
		"tabs": {
			"0" : {
				"name": "Landing",
				"desktop": "./assets/stejarcasa_desktop.png",
				"mobile": "./assets/stejarcasa_mobile.png",
				"numcom": "4",
				"comments": {
					"0": {
						"text": "Autoplay 3D render video of the house.",
						"depth": "300"
					},
	
					"1": {
						"text": "Three.js House Model. Movable with a mouse click.",
							"depth": "900"
					},

					"2": {
						"text": "Quick view of construction in current state. More detailed pictures can be found in the Construction tab.",
						"depth": "1650"
					},

					"3": {
						"text": "Google Maps API embeding with Contact form and details.",
						"depth": "2430"
					}
				}	
			},
			"1": {
				"name": "Construction",
				"desktop": "./assets/stejarcasa_img_desktop.png",
				"mobile": "./assets/stejarcasa_img_mobile.png",
				"numcom": "1",
				"comments": {
					"0": {
						"text": "Image viewer, separated into the individual construction stages for an easy structural overview. The page has two different viewing options, depending on weather is it accessed on desktop or mobile. The stage selector on the right updates depending on what you are viewing automatically.",
						"depth": "0"
					}
				}	
			}
		}
	},


	"braket.ai" : {
		"tabs": {
			"0": {
				"name": "Dataset Presentation",
                "description": "This project is still in it's initial prototype phase. Dataset Maeketplace with Source Control. Below is the UI design, built in React.js, for the dataset presentation page. It was designed to easily convey to the user quickly if the dataset is useful for one's situation. It does this with a short description, a longer README type description where the creators can go in depth, a data format and snippet visualiser, a code section that highlightes popular code that uses the dataset in question for a practical demo of use cases, an Issues section to highlight what contributors should work towards and a Discussion section for public forum-like discussion. While just a demo for now, in the future, users shall be able to simply copy the CDN URL present on the dataset card and paste it into a CLI console interface for quick and easy remote access to the dataset, voiding the need for a full download. The right side panel contains basic information, as well as credit, sources and tags."
			},
			"1": {
				"name": "Landing",
                "description" : "Below are a couple of UI elements for a logged in Landing page, the notifications for a returning user. In order, they are a Contribution Update Notification, for open-source dataset contributions, much like GitHub pull requests, a Private Message Notification, a Message Reply Notification, built with a recursive function that is invariant to the number of replies or their level, and finally a Contribution Request Notification, made for dataset admins to request each contributor to update a certain number of entries by a certain deadline."
			},
			"2": {
				"name": "Search",
                "description": "Below are the UI elements made for rapid dataset preview, mostly used in searches. It was engineered to give the user all the necesary information about the usefulness of a dataset in a clear and concise way. It contains pricing and licence information, data structure and preview as well as a description and user-driven upvote system."
			}
		}
	}
}
